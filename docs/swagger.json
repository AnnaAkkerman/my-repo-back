{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "WaterWise App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of WaterWise App"
  },
  "servers": [
    {
      "url": "https://waterwise-backend.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Water",
      "description": "Operations with water consumption."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/v1/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Register a new user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "User`s name",
                    "example": "Ivan Durak"
                  },
                  "email": {
                    "type": "string",
                    "description": "User`s email. Valid email addresses: john.doe@example.com, john-doe@example.com, john@example.co.uk,john.doe@example.co.in",
                    "uniqueItems": true,
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User`s password. Must be at least 3 symbols",
                    "example": "111"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "headers": {
              "Set-Cookies": {
                "description": "Cookies with the new access and refresh tokens",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login a user",
        "operationId": "loginUser",
        "description": "Login an existing user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User`s email. Valid email addresses: john.doe@example.com, john-doe@example.com, john@example.co.uk, john.doe@example.co.in",
                    "example": "ivan_durak@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "User`s password. Must be at least 3 symbols",
                    "example": "111"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "You`ve been successfully logged in!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "You`ve been successfully logged in!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The access token is automatically generated by database",
                          "example": "r+IhxqOAYKoqti5ZaGByw9ls2k016pQQDkfMfNVu"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          }
        }
      }
    },
    "/v1/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh tokens",
        "operationId": "refreshUsersSession",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Endpoint to receive the access and refresh tokens",
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The refresh token"
          },
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session id"
          }
        ],
        "responses": {
          "200": {
            "description": "The session has been successfully refreshed!",
            "headers": {
              "Set-Cookie": {
                "description": "Set-Cookie header containing the refresh token and session id.",
                "schema": {
                  "type": "string",
                  "examples": [
                    "refreshToken=csxJDjuF9zCcE%2Ft2TGcFiVQ7%2Fmas1l4MkMecEIvM; Path=/; Expires=Fri",
                    "09 Aug 2024 03:13:57 GMT; HttpOnly",
                    "sessionId=668dfc7512ec86d16817d911; Path=/; Expires=Fri",
                    "09 Aug 2024 03:13:57 GMT; HttpOnly"
                  ]
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "The session has been successfully refreshed!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The refreshed access token",
                          "example": "zPy2C69jOZOpghebE0MYyWAJPXaa62YTf1lrEEwl"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout a user",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Logout an existing user",
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The refresh token"
          },
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session id"
          }
        ],
        "responses": {
          "204": {
            "description": "No content - The user has been successfully logged out!"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/auth/request-reset-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request to reset a password",
        "operationId": "requestResetPassword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Send a request to the user email included the link to reset his password",
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The refresh token"
          },
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Type in the existing user email",
                    "example": "ivan_durak@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The reset password email has been successfully sent!",
            "headers": {
              "Set-Cookies": {
                "description": "Cookies with the new access and refresh tokens",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "The reset password email has been successfully sent!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Endpoint to reset password",
        "operationId": "resetPwd",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Endpoint to send the new password along the access token from the request email link",
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The refresh token"
          },
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The session id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Received the token by the request reset password email",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2Njc2NDgxMTA4N2EzMTQwYmUxODQ5MDkiLCJlbWFpbCI6Im1hdHZlZXYuci52QGljbG91ZC5jb20iLCJpYXQiOjE3MTkxODI1MjcsImV4cCI6MTcxOTE4MjgyN30.dH54pdpFObUD1J29Q6SppUM0h5Oq-rz5XymE3dnNuTI"
                  },
                  "password": {
                    "type": "string",
                    "description": "New user`s password. At least 3 symbols",
                    "example": "222"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password has been successfully reset!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "The password has been successfully reset!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Endpoint to get the Google Authorization link",
        "operationId": "getGoogleAuthUrl",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Endpoint for obtaining Google Authorization Link",
        "responses": {
          "200": {
            "description": "Successfully got Google OAuth url!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully got Google OAuth url!"
                    },
                    "data": {
                      "type": "string",
                      "description": "Specifies that the response URL contains a redirect URI",
                      "example": "https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=545839142526-0uv1q61kptfeqq7hu3d6rj2h47s9s8u8.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fconfirm-google-redirect"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/auth/confirm-oauth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Endpoint point for login with Google",
        "operationId": "loginWithGoogle",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Login with Google or register a new account if database haven`t gotten the user with this email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Query parameter 'code' in the URL from the Google Authorization link Endpoint",
                    "examples": [
                      "4%2F0ATx3LY7TtK3CmOsa-ahxK4-MND11sFClmqvK5wUmTkN0JPOq4fDWBykbYQCBYg6HAsjfDg",
                      "http://localhost:3000/confirm-google-redirect?code=4%2F0ATx3LY6I99VEyeYczGnJPwYQYx_o3l9RIiEZ3siYwrvlZH7-D8ChfWvt69KRNWnR-_mIBg&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid&authuser=0&prompt=none"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "\"Successfully logged in via Google OAuth!",
            "headers": {
              "Set-Cookie": {
                "description": "Set-Cookie header containing the refresh token and session id.",
                "schema": {
                  "type": "string",
                  "examples": [
                    "refreshToken=csxJDjuF9zCcE%2Ft2TGcFiVQ7%2Fmas1l4MkMecEIvM; Path=/; Expires=Fri",
                    "09 Aug 2024 03:13:57 GMT; HttpOnly",
                    "sessionId=668dfc7512ec86d16817d911; Path=/; Expires=Fri",
                    "09 Aug 2024 03:13:57 GMT; HttpOnly"
                  ]
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "\"Successfully logged in via Google OAuth!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "The access token after successful a login",
                          "example": "L6KR83+EGP1rPGLE1piICQrgugZJz4CA1rHZMIKd"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add water record",
        "operationId": "addWaterVolume",
        "description": "Add water record with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "volume",
                  "date",
                  "userId"
                ],
                "properties": {
                  "volume": {
                    "description": "Volume of water",
                    "type": "number",
                    "example": 2
                  },
                  "date": {
                    "description": "Date",
                    "type": "string",
                    "example": "2024-07-03"
                  },
                  "userId": {
                    "description": "Water's user id",
                    "type": "string",
                    "example": "65e4decdd286b30065d54af9"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a record of water volume",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully add a water volume!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/v1/water/daily": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get list of water records by day",
        "operationId": "getDailyWater",
        "description": "Get list of water records",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "example": "2024-07-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a daily water volume",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get a daily water volume!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/water"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/v1/water/monthly": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get list of water records by month",
        "operationId": "getMonthWater",
        "description": "Get list of water records",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "schema": {
              "type": "number"
            },
            "example": 7
          },
          {
            "in": "query",
            "name": "year",
            "schema": {
              "type": "number"
            },
            "example": 2024
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a monthly water volume",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get a monthly water volume!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/water"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/v1/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Patch water record",
        "operationId": "updaterWater",
        "description": "Update water volume",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6675a7235e9619e247d16c13"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "volume": {
                    "description": "Volume of water",
                    "type": "number",
                    "example": 50
                  },
                  "userId": {
                    "description": "Water's user id",
                    "type": "string",
                    "example": "65e4decdd286b30065d54af9"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a record of water volume",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully add a water volume!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete water record",
        "operationId": "deleteWaterVolume",
        "description": "Delete water record",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6675a7235e9619e247d16c13"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete water record"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "_id",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User`s name",
            "example": "Ivan Durak"
          },
          "email": {
            "type": "string",
            "description": "User`s email",
            "example": "john.doe@example.com"
          },
          "_id": {
            "type": "string",
            "description": "User id is automatically created by database",
            "example": "66804f38fa6c3fdb57a8771e"
          },
          "createdAt": {
            "description": "User`s created data",
            "type": "string",
            "example": "2024-06-21T03:02:44.125+00:00"
          },
          "updatedAt": {
            "description": "User`s updated data",
            "type": "string",
            "example": "2024-06-24T02:41:59.399+00:00"
          }
        }
      },
      "water": {
        "type": "object",
        "required": [
          "volume",
          "date",
          "time",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Water record id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "volume": {
            "description": "Volume of water",
            "type": "number",
            "example": 50
          },
          "date": {
            "description": "Date of week",
            "type": "string",
            "example": "2024-07-03"
          },
          "userId": {
            "description": "Water's user id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request!"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized!",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Please provide the Authorization header"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not found!"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}